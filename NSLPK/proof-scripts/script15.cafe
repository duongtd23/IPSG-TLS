
:proven(inv1(S:Sys, E2:Cipher2))
:proven(inv3(S:Sys, N:Nonce))
:goal{
eq [inv15 :nonexec] : inv15(S:Sys, P:Prin, P1:Prin, P0:Prin, R:Rand, C:Cipher2)  = true .
}
:ind on (S:Sys)
:apply(si)
:sel(1)
	:apply(tc)

	:def csb1#1 = :ctf [C#Cipher1 \in cenc1(nw(S#Sys))  .]

	:apply(csb1#1)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(2)
	:apply(tc)

	:def csb1#2 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#2)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(3)
	:apply(tc)

	:def csb1#3 = :ctf [C#Cipher2 \in cenc2(nw(S#Sys))  .]

	:apply(csb1#3)

	:def csb2#3 = :ctf {eq C@Cipher2  = C#Cipher2 .}

	:apply(csb2#3)

	:def csb3#3 = :ctf {eq P@Prin  = intruder .}

	:apply(csb3#3)

	:def csb4#3 = :ctf {eq P0@Prin  = intruder .}

	:apply(csb4#3)

	:def csb5#3 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb5#3)

	:def csb6#3 = :ctf {eq P1@Prin  = P#Prin .}

	:apply(csb6#3)

	:def csb7#3 = :ctf {eq P#Prin  = intruder .}

	:apply(csb7#3)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb8#3 = :ctf {eq key(C#Cipher2)  = intruder .}

	:apply(csb8#3)

	:def csb9#3 = :ctf {eq creator(nonce2(C#Cipher2))  = P#Prin .}

	:apply(csb9#3)

	:def csb10#3 = :ctf {eq principal(C#Cipher2)  = P#Prin .}

	:apply(csb10#3)

	:def csb11#3 = :ctf {eq forwhom(nonce2(C#Cipher2))  = intruder .}

	:apply(csb11#3)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb12#3 = :ctf [m2(intruder, P#Prin, intruder, C#Cipher2) \in nw(S#Sys)  .]

	:apply(csb12#3)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb13#3 = :ctf {eq nonce1(C#Cipher2)  = n(intruder, P#Prin, R@Rand) .}

	:apply(csb13#3)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:imp [proven-goal0]  by {E2:Cipher2 <- C#Cipher2 ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(4)
	:apply(tc)

	:def csb1#4 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#4)

	:def csb2#4 = :ctf [N0#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb2#4)

	:def csb3#4 = :ctf {eq P@Prin  = intruder .}

	:apply(csb3#4)

	:def csb4#4 = :ctf {eq P0@Prin  = intruder .}

	:apply(csb4#4)

	:def csb5#4 = :ctf {eq P0#Prin  = intruder .}

	:apply(csb5#4)

	:def csb6#4 = :ctf {eq P1@Prin  = P#Prin .}

	:apply(csb6#4)

	:def csb7#4 = :ctf {eq P#Prin  = intruder .}

	:apply(csb7#4)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb8#4 = :ctf {eq C@Cipher2  = enc2(intruder, N#Nonce, N0#Nonce, P#Prin) .}

	:apply(csb8#4)

	:def csb9#4 = :ctf {eq N#Nonce  = n(intruder, P#Prin, R@Rand) .}

	:apply(csb9#4)

	:def csb10#4 = :ctf [n(intruder, P#Prin, R@Rand) \in cnonce(nw(S#Sys))  .]

	:apply(csb10#4)

	:def csb11#4 = :ctf {eq creator(N0#Nonce)  = P#Prin .}

	:apply(csb11#4)

	:def csb12#4 = :ctf {eq forwhom(N0#Nonce)  = intruder .}

	:apply(csb12#4)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb13#4 = :ctf [m2(intruder, P#Prin, intruder, enc2(intruder, n(intruder, P#Prin, R@Rand), N0#Nonce, P#Prin)) \in nw(S#Sys)  .]

	:apply(csb13#4)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:imp [proven-goal1]  by {N:Nonce <- N0#Nonce ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(5)
	:apply(tc)

	:def csb1#5 = :ctf [C#Cipher3 \in cenc3(nw(S#Sys))  .]

	:apply(csb1#5)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(6)
	:apply(tc)

	:def csb1#6 = :ctf [N#Nonce \in cnonce(nw(S#Sys))  .]

	:apply(csb1#6)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(7)
	:apply(tc)

	:apply (rd)


:sel(8)
	:apply(tc)

	:def csb1#8 = :ctf [R#Rand \in ur(S#Sys)  .]

	:apply(csb1#8)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(9)
	:apply(tc)

	:def csb1#9 = :ctf {eq principal(C#Cipher1)  = P#Prin .}

	:apply(csb1#9)

	:def csb2#9 = :ctf {eq key(C#Cipher1)  = P1#Prin .}

	:apply(csb2#9)

	:def csb3#9 = :ctf [R#Rand \in ur(S#Sys)  .]

	:apply(csb3#9)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb4#9 = :ctf [m1(P0#Prin, P#Prin, P1#Prin, C#Cipher1) \in nw(S#Sys)  .]

	:apply(csb4#9)

	:def csb5#9 = :ctf {eq P@Prin  = intruder .}

	:apply(csb5#9)

	:def csb6#9 = :ctf {eq P#Prin  = intruder .}

	:apply(csb6#9)

	:def csb7#9 = :ctf [m1(P0#Prin, intruder, P1#Prin, C#Cipher1) \in nw(S#Sys)  .]

	:apply(csb7#9)

	:def csb8#9 = :ctf {eq P1@Prin  = P1#Prin .}

	:apply(csb8#9)

	:def csb9#9 = :ctf {eq P0@Prin  = P1#Prin .}

	:apply(csb9#9)

	:def csb10#9 = :ctf {eq P1#Prin  = intruder .}

	:apply(csb10#9)

	:def csb11#9 = :ctf [m1(P0#Prin, intruder, intruder, C#Cipher1) \in nw(S#Sys)  .]

	:apply(csb11#9)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:def csb12#9 = :ctf {eq C@Cipher2  = enc2(intruder, nonce(C#Cipher1), n(P1#Prin, intruder, R#Rand), P1#Prin) .}

	:apply(csb12#9)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)


:sel(10)
	:apply(tc)

	:def csb1#10 = :ctf {eq key(C#Cipher2)  = P#Prin .}

	:apply(csb1#10)

	:def csb2#10 = :ctf {eq principal(C#Cipher2)  = P0#Prin .}

	:apply(csb2#10)

	:def csb3#10 = :ctf [m2(P1#Prin, P0#Prin, P#Prin, C#Cipher2) \in nw(S#Sys)  .]

	:apply(csb3#10)

	:def csb4#10 = :ctf {eq nonce1(C#Cipher2)  = n(P#Prin, P0#Prin, R#Rand) .}

	:apply(csb4#10)

	:def csb5#10 = :ctf [m1(P#Prin, P#Prin, P0#Prin, enc1(P0#Prin, n(P#Prin, P0#Prin, R#Rand), P#Prin)) \in nw(S#Sys)  .]

	:apply(csb5#10)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

	:imp [inv15]  by {C:Cipher2 <- C@Cipher2 ; P0:Prin <- P0@Prin ; P1:Prin <- P1@Prin ; P:Prin <- P@Prin ; R:Rand <- R@Rand ;}

	:apply (rd)

